service: klau-drive
frameworkVersion: '3'

plugins:
  - serverless-localstack

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1
  memorySize: 128
  timeout: 20
  environment:
    CONTENT_BUCKET_NAME:
      Ref: contentBucket
    CONTENT_METADATA_TB_NAME:
      Ref: fileMetaTable
    USER_TB_NAME:
      Ref: userTable
    ENDPOINT: ${env:ENDPOINT}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [userTable, Arn]
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [fileMetaTable, Arn]

package:
  individually: True
  patterns:
    - '!**/**'
    - 'src/lambdas/common.py'

functions:
  listFiles:
    handler: src/lambdas/lambda_list_files.lambda_list_files
    package:
      patterns:
        - 'src/lambdas/lambda_list_files.py'
    events:
      - http:
          path: file
          method: get
          # TODO: enable cors later, better security
  login:
    handler: src/lambdas/lambda_login.lambda_login
    package:
      patterns:
        - 'src/lambdas/lambda_login.py'
    events:
      - http:
          path: login
          method: post
  register:
    handler: src/lambdas/lambda_register.lambda_register
    package:
      patterns:
        - 'src/lambdas/lambda_register.py'
    events:
      - http:
          path: user
          method: post
  uploadFile:
    handler: src/lambdas/lambda_upload_file.lambda_upload_file
    package:
      patterns:
        - 'src/lambdas/lambda_upload_file.py'
    events:
      - http:
          path: file
          method: post
  updateFile:
    handler: src/lambdas/lambda_update_file.lambda_update_file
    package:
      patterns:
        - 'src/lambdas/lambda_update_file.py'
    events:
      - http:
          path: file
          method: put
  deleteFile:
    handler: src/lambdas/lambda_delete_file.lambda_delete_file
    package:
      patterns:
        - 'src/lambdas/lambda_delete_file.py'
    events:
      - http:
          path: file
          method: delete   

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    fileMetaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: file_meta
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    userAlbums:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_albums
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: album_uuid
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: album_uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    albumFiles:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: album_files
        AttributeDefinitions:
          - AttributeName: album_uuid
            AttributeType: S
          - AttributeName: uuid # can be album_uuid or file_uuid
            AttributeType: S
        KeySchema:
          - AttributeName: album_uuid
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    contentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: content
